// <auto-generated />
using System;
using LLServer.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LLServer.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230929215635_Merge TravelHistory")]
    partial class MergeTravelHistory
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4");

            modelBuilder.Entity("LLServer.Database.Models.GameSession", b =>
                {
                    b.Property<string>("SessionId")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ExpireTime")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGuest")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTerminal")
                        .HasColumnType("INTEGER");

                    b.Property<ulong?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("SessionId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("LLServer.Database.Models.PersistentLiveData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("FinaleCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FullCombo")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LiveId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("New")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PlayerCount1")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SelectCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicalHiRate")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicalHiScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TechnicalRank")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalHiScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrophyCountBronze")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrophyCountGold")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TrophyCountSilver")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Unlocked")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("LiveDatas");
                });

            modelBuilder.Entity("LLServer.Database.Models.ProfileCard", b =>
                {
                    b.Property<string>("ProfileCardId")
                        .HasColumnType("TEXT");

                    b.Property<int>("GameHistoryId")
                        .HasColumnType("INTEGER");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProfileCardId");

                    b.HasIndex("GameHistoryId");

                    b.HasIndex("UserID");

                    b.ToTable("ProfileCards");
                });

            modelBuilder.Entity("LLServer.Database.Models.User", b =>
                {
                    b.Property<ulong>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CardId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Flags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("Initialized")
                        .HasColumnType("INTEGER");

                    b.HasKey("UserId");

                    b.HasAlternateKey("CardId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LLServer.Models.UserData.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AchievementId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_achievement_id");

                    b.Property<bool>("New")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "new");

                    b.Property<bool>("Unlocked")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "unlocked");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Achievements");
                });

            modelBuilder.Entity("LLServer.Models.UserData.AchievementRecordBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Values")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "values");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("AchievementRecordBooks");
                });

            modelBuilder.Entity("LLServer.Models.UserData.Badge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BadgeId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_badge_id");

                    b.Property<bool>("New")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "new");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Badges");
                });

            modelBuilder.Entity("LLServer.Models.UserData.CardFrame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardFrameId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_card_frame_id");

                    b.Property<bool>("New")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "new");

                    b.Property<bool>("Unlocked")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "unlocked");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("CardFrames");
                });

            modelBuilder.Entity("LLServer.Models.UserData.GameHistory", b =>
                {
                    b.Property<int>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Badge")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "badge");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "character_id");

                    b.Property<int>("ComboRank")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "combo_rank");

                    b.Property<int>("ComboScore")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "combo_score");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created");

                    b.Property<string>("DUserId")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "d_user_id");

                    b.Property<int>("EventMode")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "event_mode");

                    b.Property<bool>("Favorite")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "favorite");

                    b.Property<int>("FinalePoint")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "finale_point");

                    b.Property<int>("FullCombo")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "full_combo");

                    b.Property<int>("Honor")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "honor");

                    b.Property<int>("IdolKind")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastCutFocus")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "last_cut_focus");

                    b.Property<int>("LiveId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_live_id");

                    b.Property<int>("MaxCombo")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "max_combo");

                    b.Property<int>("MemberCardId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_membercard_id");

                    b.Property<int>("MemberCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "member_count");

                    b.Property<int>("MemorialCard")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "memorial_card");

                    b.Property<int>("Nameplate")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "nameplate");

                    b.Property<int>("NoteBadCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "note_bad_count");

                    b.Property<int>("NoteGoodCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "note_good_count");

                    b.Property<int>("NoteGreatCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "note_great_count");

                    b.Property<int>("NoteMissCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "note_miss_count");

                    b.Property<int>("NotePerfectCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "note_perfect_count");

                    b.Property<int>("PlayPart")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "play_part");

                    b.Property<string>("PlayPlace")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "play_place");

                    b.Property<int>("PrintRest")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "print_rest");

                    b.Property<bool>("RecommendFirstMember")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "recommend_first_member");

                    b.Property<bool>("RecommendFirstMusic")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "recommend_first_music");

                    b.Property<bool>("RecommendFirstSkill")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "recommend_first_skill");

                    b.Property<bool>("RecommendHiScore")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "recommend_hi_score");

                    b.Property<string>("SkillArgCamera")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_arg_camera");

                    b.Property<string>("SkillCardsCamera")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_cards_camera");

                    b.Property<string>("SkillCardsMain")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_cards_main");

                    b.Property<string>("SkillCardsStage")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_cards_stage");

                    b.Property<string>("SkillLevelsCamera")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_levels_camera");

                    b.Property<string>("SkillLevelsMain")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_levels_main");

                    b.Property<string>("SkillLevelsStage")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_levels_stage");

                    b.Property<int>("SkillRank")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_rank");

                    b.Property<int>("SkillScore")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_score");

                    b.Property<string>("SkillStatusCamera")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_status_camera");

                    b.Property<string>("SkillStatusMain")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_status_main");

                    b.Property<string>("SkillStatusStage")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_status_stage");

                    b.Property<int>("StageId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_stage_id");

                    b.Property<int>("SynchroRank")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "synchro_rank");

                    b.Property<int>("SynchroScore")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "synchro_score");

                    b.Property<int>("TechnicalRank")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "technical_rank");

                    b.Property<int>("TechnicalScore")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "technical_score");

                    b.Property<int>("TotalRank")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "total_rank");

                    b.Property<int>("UsedMemberCard")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "used_member_card");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YellRank")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "yell_rank");

                    b.HasKey("DbId");

                    b.HasIndex("UserID");

                    b.ToTable("GameHistory");
                });

            modelBuilder.Entity("LLServer.Models.UserData.HonorData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HonorId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_honor_id");

                    b.Property<bool>("New")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "new");

                    b.Property<bool>("Unlocked")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "unlocked");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Honors");
                });

            modelBuilder.Entity("LLServer.Models.UserData.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "count");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_item_id");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("LLServer.Models.UserData.MemberCardData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardMemberId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_card_member_id");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "count");

                    b.Property<bool>("New")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "new");

                    b.Property<int>("PrintRest")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "print_rest");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("MemberCardData");
                });

            modelBuilder.Entity("LLServer.Models.UserData.MemberData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AchieveRank")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "yell_achieve_rank");

                    b.Property<int>("Camera")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "camera");

                    b.Property<int>("CardMemberId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_card_member_id");

                    b.Property<int>("CardMemorialId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_card_memorial_id");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "character_id");

                    b.Property<int>("Main")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "main");

                    b.Property<bool>("New")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "new");

                    b.Property<int>("SelectCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "select_count");

                    b.Property<int>("Stage")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "stage");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YellPoint")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "yell_point");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("MemberData");
                });

            modelBuilder.Entity("LLServer.Models.UserData.MusicData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("MusicId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "music_id");

                    b.Property<bool>("New")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "new");

                    b.Property<bool>("Unlocked")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "unlocked");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("Musics");
                });

            modelBuilder.Entity("LLServer.Models.UserData.NamePlate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("NamePlateId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_nameplate_id");

                    b.Property<bool>("New")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "new");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("NamePlates");
                });

            modelBuilder.Entity("LLServer.Models.UserData.SkillCardData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardSkillId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_card_skill_id");

                    b.Property<bool>("New")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "new");

                    b.Property<int>("PrintRest")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "print_rest");

                    b.Property<int>("SkillLevel")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "skill_level");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("SkillCardData");
                });

            modelBuilder.Entity("LLServer.Models.UserData.SpecialItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("IdolKind")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "idol_kind");

                    b.Property<int>("SpecialId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "special_id");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("SpecialItems");
                });

            modelBuilder.Entity("LLServer.Models.UserData.TravelData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardMemorialId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_card_memorial_id");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "character_id");

                    b.Property<int>("LastLandmark")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "last_landmark");

                    b.Property<string>("Modified")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "modified");

                    b.Property<string>("Positions")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "positions");

                    b.Property<int>("Slot")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "slot");

                    b.Property<int>("TravelPamphletId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_travel_pamphlet_id");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("TravelData");
                });

            modelBuilder.Entity("LLServer.Models.UserData.TravelHistoryBase", b =>
                {
                    b.Property<int>("DbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CardMemberId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_card_member_id");

                    b.Property<int>("CreateType")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "create_type");

                    b.Property<string>("Created")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "created");

                    b.Property<int>("IdolKind")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OtherCharacterId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "other_character_id");

                    b.Property<int>("OtherPlayerBadge")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "other_player_badge");

                    b.Property<string>("OtherPlayerName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "other_player_name");

                    b.Property<int>("OtherPlayerNameplate")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "other_player_nameplate");

                    b.Property<int>("PrintRest")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "print_rest");

                    b.Property<int>("SnapBackgroundId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_snap_background_id");

                    b.Property<string>("TenpoName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tenpo_name");

                    b.Property<int>("TravelPamphletId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_travel_pamphlet_id");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("DbId");

                    b.HasIndex("UserID");

                    b.ToTable("TravelHistory");
                });

            modelBuilder.Entity("LLServer.Models.UserData.TravelPamphlet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsNew")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "is_new");

                    b.Property<int>("Round")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "round");

                    b.Property<int>("TotalDiceCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "total_dice_count");

                    b.Property<int>("TotalTalkCount")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "total_talk_count");

                    b.Property<string>("TravelExRewards")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "travel_ex_rewards");

                    b.Property<int>("TravelPamphletId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_travel_pamphlet_id");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("TravelPamphlets");
                });

            modelBuilder.Entity("LLServer.Models.UserData.UserData", b =>
                {
                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Badge")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "badge");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "character_id");

                    b.Property<int>("CreditCountCenter")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "credit_count_center");

                    b.Property<int>("CreditCountSatellite")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "credit_count_satellite");

                    b.Property<int>("Honor")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "honor");

                    b.Property<int>("IdolKind")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "idol_kind");

                    b.Property<int>("Level")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int>("Nameplate")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "nameplate");

                    b.Property<int>("NoteSpeedLevel")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "note_speed_level");

                    b.Property<int>("PlayCenter")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "play_center");

                    b.Property<string>("PlayDate")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "play_date");

                    b.Property<int>("PlayLs4")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "play_ls4");

                    b.Property<int>("PlaySatellite")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "play_satellite");

                    b.Property<string>("ProfileCardId1")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "profile_card_id_1");

                    b.Property<string>("ProfileCardId2")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "profile_card_id_2");

                    b.Property<int>("ScreenFilterLevel")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "screen_filter_level");

                    b.Property<int>("SubMonitorType")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "submonitor_type");

                    b.Property<string>("TenpoName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "tenpo_name");

                    b.Property<int>("TotalExp")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "total_exp");

                    b.Property<int>("VolumeBgm")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "volume_bgm");

                    b.Property<int>("VolumeSe")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "volume_se");

                    b.Property<int>("VolumeVoice")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "volume_voice");

                    b.HasKey("UserID");

                    b.ToTable("UserData");
                });

            modelBuilder.Entity("LLServer.Models.UserData.UserDataAqours", b =>
                {
                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Badge")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "badge");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "character_id");

                    b.Property<int>("Honor")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "honor");

                    b.Property<int>("Nameplate")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "nameplate");

                    b.Property<string>("ProfileCardId1")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "profile_card_id_1");

                    b.Property<string>("ProfileCardId2")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "profile_card_id_2");

                    b.HasKey("UserID");

                    b.ToTable("UserDataAqours");
                });

            modelBuilder.Entity("LLServer.Models.UserData.UserDataSaintSnow", b =>
                {
                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Badge")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "badge");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "character_id");

                    b.Property<int>("Honor")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "honor");

                    b.Property<int>("Nameplate")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "nameplate");

                    b.Property<string>("ProfileCardId1")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "profile_card_id_1");

                    b.Property<string>("ProfileCardId2")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasAnnotation("Relational:JsonPropertyName", "profile_card_id_2");

                    b.HasKey("UserID");

                    b.ToTable("UserDataSaintSnow");
                });

            modelBuilder.Entity("LLServer.Models.UserData.YellAchievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("New")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "new");

                    b.Property<bool>("Unlocked")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "unlocked");

                    b.Property<ulong>("UserID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("YellAchievementId")
                        .HasColumnType("INTEGER")
                        .HasAnnotation("Relational:JsonPropertyName", "m_yell_achievement_id");

                    b.HasKey("Id");

                    b.HasIndex("UserID");

                    b.ToTable("YellAchievements");
                });

            modelBuilder.Entity("LLServer.Database.Models.GameSession", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithOne("Session")
                        .HasForeignKey("LLServer.Database.Models.GameSession", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Database.Models.PersistentLiveData", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("LiveDatas")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Database.Models.ProfileCard", b =>
                {
                    b.HasOne("LLServer.Models.UserData.GameHistory", "GameHistory")
                        .WithMany()
                        .HasForeignKey("GameHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GameHistory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.Achievement", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("Achievements")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.AchievementRecordBook", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("AchievementRecordBooks")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.Badge", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("Badges")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.CardFrame", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("CardFrames")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.GameHistory", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("GameHistory")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.HonorData", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("Honors")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.Item", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("Items")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.MemberCardData", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("MemberCards")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.MemberData", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("Members")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.MusicData", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("Musics")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.NamePlate", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("NamePlates")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.SkillCardData", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("SkillCards")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.SpecialItem", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("SpecialItems")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.TravelData", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("TravelData")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.TravelHistoryBase", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("TravelHistory")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.TravelPamphlet", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("TravelPamphlets")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.UserData", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithOne("UserData")
                        .HasForeignKey("LLServer.Models.UserData.UserData", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.UserDataAqours", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithOne("UserDataAqours")
                        .HasForeignKey("LLServer.Models.UserData.UserDataAqours", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.UserDataSaintSnow", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithOne("UserDataSaintSnow")
                        .HasForeignKey("LLServer.Models.UserData.UserDataSaintSnow", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Models.UserData.YellAchievement", b =>
                {
                    b.HasOne("LLServer.Database.Models.User", "User")
                        .WithMany("YellAchievements")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LLServer.Database.Models.User", b =>
                {
                    b.Navigation("AchievementRecordBooks");

                    b.Navigation("Achievements");

                    b.Navigation("Badges");

                    b.Navigation("CardFrames");

                    b.Navigation("GameHistory");

                    b.Navigation("Honors");

                    b.Navigation("Items");

                    b.Navigation("LiveDatas");

                    b.Navigation("MemberCards");

                    b.Navigation("Members");

                    b.Navigation("Musics");

                    b.Navigation("NamePlates");

                    b.Navigation("Session");

                    b.Navigation("SkillCards");

                    b.Navigation("SpecialItems");

                    b.Navigation("TravelData");

                    b.Navigation("TravelHistory");

                    b.Navigation("TravelPamphlets");

                    b.Navigation("UserData")
                        .IsRequired();

                    b.Navigation("UserDataAqours")
                        .IsRequired();

                    b.Navigation("UserDataSaintSnow")
                        .IsRequired();

                    b.Navigation("YellAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
