@model LLServer.Gacha.Database.GachaTable

@{
    Layout = "../_Layout.cshtml";
}

<style>
.cardIdRow {
   display: flex;
   align-items: center;
}

.cardIdInput {
   margin-right: 10px;
}

.cardGroupIdRow {
   display: flex;
   align-items: center;
}

.cardGroupIdInput {
   margin-right: 10px;
}
</style>

<div style="display: flex;">
    <div style="flex: 1;">
        
        <h2>Editing Information @Model.id</h2>

        @using (Html.BeginForm("EditTable", "GachaTableEditor", FormMethod.Post))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "")
                @Html.HiddenFor(model => model.id)

                <h2>Table scan metadata</h2>
                @Html.Partial("_TableMetaData", Model.metaData)
                <br/>

                <h2>Character IDs</h2>
                @Html.Partial("_CharacterIconEditor", Model.characterIdBools)

                <h2>Table data editor</h2>
                <div class="form-group">
                    <span>Enabling isValid will allow this gacha table to get used in game</span>
                    <br/>
                    @Html.LabelFor(model => model.isValid)
                    @Html.EditorFor(model => model.isValid)
                    <br/>
                    <span>Make sure you only edit the name if this table was manually created and not made with the log scanner!</span>
                    @Html.LabelFor(model => model.newName)
                    @Html.EditorFor(model => model.newName)
                    <br/>
                </div>

                <br/>

                <div class="form-group">
                    @Html.LabelFor(model => model.cardIds, "Cards")
                    <div id="cardIdsContainer">
                        @for (int i = 0; i < Model.cardIds.Length; i++)
                        {
                            <div class="cardIdRow">
                                @Html.DropDownListFor(model => model.cardIds[i], ViewBag.cardIdNamePairs as SelectList, new { @class = "cardIdInput" })
                                <button type="button" class="removeCardIdBtn">Remove</button>
                            </div>
                        }
                    </div>
                    <button type="button" id="addCardIdBtn">Add Card ID</button>
                </div>

                <br/>

                <div class="form-group">
                    @Html.LabelFor(model => model.cardGroupIds, "Card Groups")
                    <div id="cardGroupIdsContainer">
                        @for (int i = 0; i < Model.cardGroupIds.Length; i++)
                        {
                            <div class="cardGroupIdRow">
                                @Html.DropDownListFor(model => model.cardGroupIds[i], ViewBag.cardGroupNamePairs as SelectList, new { @class = "cardGroupIdInput" })
                                <button type="button" class="removeCardGroupIdBtn">Remove</button>
                            </div>
                        }
                    </div>
                    <button type="button" id="addCardGroupIdBtn">Add Card Group ID</button>
                </div>

                <br/>

                @Html.HiddenFor(model => model.id)

                <div class="form-group">
                    <input type="submit" value="Save" class="nav-btn"/>
                </div>
            </div>
        }
    
    </div>

    <div style="flex: 1;">
        <h2>All Card Groups</h2>
        <span>Click a card group to add it to the table</span>
        
        @foreach (var pair in ViewBag.cardGroupImages)
        {
            <div id="allCardGroupsContainer">
                @foreach (var image in pair.Value)
                {
                    <div class="cardGroup">
                        <button type="button" class="addCardGroupBtn" data-card-group-id="@pair.Key">
                            <img src=@image alt="@image" />
                        </button>
                    </div>
                }
                <span>@ViewBag.cardGroupNames[pair.Key]</span>
            </div>
            <br/>
        }

        <h2>All Cards</h2>
        <span>Click a card to add it to the group</span>
        <div id="allCardsContainer">
            @foreach (var pair in ViewBag.cardIdNamePairs)
            {
                <div class="cardRow">
                    <button type="button" class="addCardBtn" data-card-id="@pair.Value">
                        <img src="@GetCardImage(pair.Value)" alt="@pair.Text"/>
                    </button>
                    <br/>
                    <span>@pair.Text</span>
                </div>
            }
        </div>
    </div>
    
</div>

@functions
{
    public string GetCardImage(string cardId)
    {
        return ViewBag.cardIdToImage[cardId];
    }
}

@section scripts {
    <script>
        $(document).ready(function () {
                    var cardIdNamePairs = @Html.Raw(Json.Serialize(ViewBag.cardIdNamePairs));
                    var cardIdCount = @Model.cardIds.Length; // Get the initial count from the server
                    
                    // Add Card ID button click event
                    $("#addCardIdBtn").click(function () {
                        var select = $('<select class="cardIdInput" id="cardIds_' + cardIdCount + '_" name="cardIds[' + cardIdCount + ']" ></select>');
                        for(var i = 0; i < cardIdNamePairs.length; i++) {
                            select.append('<option value="' + cardIdNamePairs[i].value + '">' + cardIdNamePairs[i].text + '</option>');
                        }
                        var newRow = $('<div class="cardIdRow"></div>').append(select).append('<button type="button" class="removeCardIdBtn">Remove</button>');
                        $("#cardIdsContainer").append(newRow);
                        cardIdCount++; // Increment the count each time you add a dropdown
                    });
                    
                    // Add Card button click event for all cards
                    $(".addCardBtn").click(function () {
                        var cardId = $(this).data("card-id");
                        addCardId(cardId);
                    });
                    
                    function addCardId(cardId) {
                        //check if cardId is already in the list
                        var cardIdInputs = $(".cardIdInput");
                        for(var i = 0; i < cardIdInputs.length; i++) {
                            if (cardIdInputs[i].value == cardId) {
                                return;
                            }
                        }
                        
                        var select = $('<select class="cardIdInput" id="cardIds_' + cardIdCount + '_" name="cardIds[' + cardIdCount + ']" ></select>');
                        for(var i = 0; i < cardIdNamePairs.length; i++) {
                            var option = $('<option value="' + cardIdNamePairs[i].value + '">' + cardIdNamePairs[i].text + '</option>');
                            if (cardIdNamePairs[i].value == cardId) {
                                option.prop("selected", true);
                            }
                            select.append(option);
                        }
                        var newRow = $('<div class="cardIdRow"></div>').append(select).append('<button type="button" class="removeCardIdBtn">Remove</button>');
                        $("#cardIdsContainer").append(newRow);
                        cardIdCount++;
                    }
                    
                    //remove Card ID button click event
                    $(document).on("click", ".removeCardIdBtn", function () {
                        $(this).closest(".cardIdRow").remove();
                        
                        //re-number the cardIds
                        var cardIdInputs = $(".cardIdInput");
                        for(var i = 0; i < cardIdInputs.length; i++) {
                            cardIdInputs[i].id = "cardIds_" + i + "_";
                            cardIdInputs[i].name = "cardIds[" + i + "]";
                        }
                        
                        cardIdCount--;
                    });
                });
        
        
        var cardGroupNamePairs = @Html.Raw(Json.Serialize(ViewBag.cardGroupNamePairs));
            var cardGroupIdCount = @Model.cardGroupIds.Length; // Get the initial count from the server
        
            // Add Card Group ID button click event
            $("#addCardGroupIdBtn").click(function () {
                var select = $('<select class="cardGroupIdInput" id="cardGroupIds_' + cardGroupIdCount + '_" name="cardGroupIds[' + cardGroupIdCount + ']" ></select>');
                for(var i = 0; i < cardGroupNamePairs.length; i++) {
                    select.append('<option value="' + cardGroupNamePairs[i].value + '">' + cardGroupNamePairs[i].text + '</option>');
                }
                var newRow = $('<div class="cardGroupIdRow"></div>').append(select).append('<button type="button" class="removeCardGroupIdBtn">Remove</button>');
                $("#cardGroupIdsContainer").append(newRow);
                cardGroupIdCount++; // Increment the count each time you add a dropdown
            });
        
            // Add Card Group button click event for all cards
            $(".addCardGroupBtn").click(function () {
                var cardGroupId = $(this).data("card-group-id");
                addCardGroupId(cardGroupId);
            });
        
            function addCardGroupId(cardGroupId) {
                //check if cardGroupId is already in the list
                var cardGroupIdInputs = $(".cardGroupIdInput");
                for(var i = 0; i < cardGroupIdInputs.length; i++) {
                    if (cardGroupIdInputs[i].value == cardGroupId) {
                        return;
                    }
                }
        
                var select = $('<select class="cardGroupIdInput" id="cardGroupIds_' + cardGroupIdCount + '_" name="cardGroupIds[' + cardGroupIdCount + ']" ></select>');
                for(var i = 0; i < cardGroupNamePairs.length; i++) {
                    var option = $('<option value="' + cardGroupNamePairs[i].value + '">' + cardGroupNamePairs[i].text + '</option>');
                    if (cardGroupNamePairs[i].value == cardGroupId) {
                        option.prop("selected", true);
                    }
                    select.append(option);
                }
                var newRow = $('<div class="cardGroupIdRow"></div>').append(select).append('<button type="button" class="removeCardGroupIdBtn">Remove</button>');
                $("#cardGroupIdsContainer").append(newRow);
                cardGroupIdCount++;
            }
        
            //remove Card Group ID button click event
            $(document).on("click", ".removeCardGroupIdBtn", function () {
                $(this).closest(".cardGroupIdRow").remove();
        
                //re-number the cardGroupIds
                var cardGroupIdInputs = $(".cardGroupIdInput");
                for(var i = 0; i < cardGroupIdInputs.length; i++) {
                    cardGroupIdInputs[i].id = "cardGroupIds_" + i + "_";
                    cardGroupIdInputs[i].name = "cardGroupIds[" + i + "]";
                }
        
                cardGroupIdCount--;
            });
        
        
    </script>
}
