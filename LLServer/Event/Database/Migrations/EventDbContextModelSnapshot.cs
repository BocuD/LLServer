// <auto-generated />
using System;
using LLServer.Event.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LLServer.Event.Database.Migrations
{
    [DbContext(typeof(EventDbContext))]
    partial class EventDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0-preview.6.23329.4");

            modelBuilder.Entity("LLServer.Event.Database.EventEntry", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MemberTravelPamphletId")
                        .HasColumnType("INTEGER");

                    b.Property<float>("PointMag")
                        .HasColumnType("REAL");

                    b.Property<int>("PointType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("end")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("resourceID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("start")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("resourceID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("LLServer.Event.Database.ResourceEntry", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("hash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("LLServer.Event.InformationEntry", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisplayCenter")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("DisplaySatellite")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("end")
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("resourceID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("start")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("resourceID");

                    b.ToTable("Information");
                });

            modelBuilder.Entity("LLServer.Event.Database.EventEntry", b =>
                {
                    b.HasOne("LLServer.Event.Database.ResourceEntry", "resource")
                        .WithMany()
                        .HasForeignKey("resourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("resource");
                });

            modelBuilder.Entity("LLServer.Event.InformationEntry", b =>
                {
                    b.HasOne("LLServer.Event.Database.ResourceEntry", "resource")
                        .WithMany()
                        .HasForeignKey("resourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("resource");
                });
#pragma warning restore 612, 618
        }
    }
}
